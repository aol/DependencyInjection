<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
">
    
    <!--
        This is the Spring configuration file using XML. Spring has other options
        for configuring objects and injection. Here the "bean" tag is a reference
        to a class of objects. The id is a way for one bean to refer to another, and
        will be used in your code to retrieve a bean. Think of it as an alias. The
        class attribute is important. It must be the fully-qualified name of the class.
        And the scope attribute is set to singleton by default, or you can explicitly
        set it. Singletons are single, global objects managed by Spring. You can also
        change this to "prototype" and then Spring will give you a new instance on
        every request. Their are other options for web applications.
    -->
    
    <!-- Spring will do two things:
         1. Spring will instantiate all the objects (beans)
         2. Then Spring will inject the input and output objects automatically. The "ref"
            attribute of the bean tag indicates the id value of a dependent object.
            Note that these objects are made available in your program code by 
            call getBean("id_name") from the ApplicationContext object (see Startup) -->
    <bean id="messageService" class="dependencyinjection.example4.MessageService" scope="singleton">
        <property name="input" ref="messageInput"/>
        <property name="output" ref="messageOutput"/>
    </bean>
    
    <!-- These are the dependent objects that Spring will inject into the above MessageService.
         Try changing to different input/output classes to see how easy it is to reconfigure 
         the behavior of this applicaiton -->
    <bean id="messageInput" class="dependencyinjection.example2.RandomMessageProvider" scope="singleton"/>
    <bean id="messageOutput" class="dependencyinjection.example2.ConsoleMessageOutput" scope="singleton"/>


</beans>
